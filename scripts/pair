#!/usr/bin/env python

import os
import sys
import argparse
from pytools.files import ParameterParser
from pytools.group import Group,run_grouping

class PairUniqueGroup(Group):
    def __init__(self, tup):
        super(PairUniqueGroup, self).__init__(tup)
        self.items = set()

    def add(self, chunks):
        val = tuple([chunks[c] for c in args.columns])
        if val not in self.items:
            for item in self.items:
                if val <= item:
                    args.outfile.write(self.tup + list(val) + list(item))
                else:
                    args.outfile.write(self.tup + list(item) + list(val))
            self.items.add(val)

    def done(self):
        pass

class PairAllGroup(Group):
    def __init__(self, tup):
        super(PairAllGroup, self).__init__(tup)
        self.items = []

    def add(self, chunks):
        val = [chunks[c] for c in args.columns]
        for item in self.items:
            args.outfile.write(self.tup + val + item)
        self.items.append(val)

    def done(self):
        pass

class PairFirstGroup(Group):
    def __init__(self, tup):
        super(PairFirstGroup, self).__init__(tup)
        self.first = None

    def add(self, chunks):
        val = [chunks[c] for c in args.columns]
        if self.first == None:
            self.first = val
        else:
            args.outfile.write(self.tup + self.first + val)

    def done(self):
        pass

class PairLastGroup(Group):
    def __init__(self, tup):
        super(PairLastGroup, self).__init__(tup)
        self.items = []

    def add(self, chunks):
        self.items.append([chunks[c] for c in args.columns])

    def done(self):
        last = self.items[-1]
        for val in self.items[:-1]:
            args.outfile.write(self.tup + last + val)

if __name__ == "__main__":
    pp = ParameterParser('Compute pairs of values in column(s)', columns = '*', labels = [None], append = False)
    pp.parser.add_argument('-m', '--method', choices=['all', 'unique', 'first', 'last', 'sequence'], default='unique')
    args = pp.parseArgs()
    if not any(args.labels):
        args.labels = args.columns_names + [col + '_pair' for col in args.columns_names]
    args = pp.getArgs(args)

    if args.method == 'unique':
        cls = PairUniqueGroup
    elif args.method == 'first':
        cls = PairFirstGroup
    elif args.method == 'all':
        cls = PairAllGroup
    elif args.method == 'last':
        cls = PairLastGroup
    else:
        raise Exception('Not Implemented!')
    run_grouping(args.infile, cls, args.group, args.ordered)
